// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9ddDjPDiAQE72HUa13ENBq
// Component: vFmR5CGMrbfy3B
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavBar from "../../NavBar"; // plasmic-import: Xf2wx5iZAX-Wyy/component
import Button from "../../Button"; // plasmic-import: r98mWgbU1oG5dP/component
import { ProductBox } from "@plasmicpkgs/commerce"; // plasmic-import: 1gYJf_XBZUAD/codeComponent
import { ProductMedia } from "@plasmicpkgs/commerce"; // plasmic-import: qpULM0wwWW/codeComponent
import { ProductMediaCollection } from "@plasmicpkgs/commerce"; // plasmic-import: a5BakxYc5Db_/codeComponent
import { ProductTextField } from "@plasmicpkgs/commerce"; // plasmic-import: S1F4q0wN6b/codeComponent
import { ProductPriceComponent } from "@plasmicpkgs/commerce"; // plasmic-import: _PaJxGc8gf/codeComponent
import { ProductVariantPicker } from "@plasmicpkgs/commerce"; // plasmic-import: i3vHZr7erKX/codeComponent
import { ProductQuantity } from "@plasmicpkgs/commerce"; // plasmic-import: CjfQQrwiHjD/codeComponent
import TextInput from "../../TextInput"; // plasmic-import: U44Zho2eatr7x4/component
import { AddToCartButton } from "@plasmicpkgs/commerce"; // plasmic-import: NR7KYUJmEqx/codeComponent
import Separator from "../../Separator"; // plasmic-import: 5lvxTM7O9xTyx8/component
import { ProductCollection } from "@plasmicpkgs/commerce"; // plasmic-import: vU2jzVAnFP/codeComponent
import ProductCard from "../../ProductCard"; // plasmic-import: 7P4VbSUTHTWj1G/component
import Footer from "../../Footer"; // plasmic-import: agLchBvdK6c1SV/component
import { useScreenVariants as useScreenVariantszyMLegoUrZk6Ek } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: ZyMLegoUrZk6ek/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_full_commerce_storefront.module.css"; // plasmic-import: 9ddDjPDiAQE72HUa13ENBq/projectcss
import sty from "./PlasmicItem.module.css"; // plasmic-import: vFmR5CGMrbfy3B/css
import HomeIcon from "./icons/PlasmicIcon__Home"; // plasmic-import: cWZizG_Kh3d_pM/icon
import LikeIcon from "./icons/PlasmicIcon__Like"; // plasmic-import: AurXHGWLD9JZYf/icon
import RightArrowIcon from "./icons/PlasmicIcon__RightArrow"; // plasmic-import: M7XzFR098hOVp4/icon

export const PlasmicItem__VariantProps = new Array();

export const PlasmicItem__ArgProps = new Array("container42");

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicItem__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],

    [$props, $ctx]
  );

  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantszyMLegoUrZk6Ek()
  });
  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicItem.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicItem.pageMetadata.title}
        />

        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicItem.pageMetadata.title}
        />

        <meta
          key="description"
          name="description"
          content={PlasmicItem.pageMetadata.description}
        />

        <meta
          key="og:description"
          property="og:description"
          content={PlasmicItem.pageMetadata.description}
        />

        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicItem.pageMetadata.description}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <NavBar
            data-plasmic-name={"navBar"}
            data-plasmic-override={overrides.navBar}
            className={classNames("__wab_instance", sty.navBar)}
          />

          <section className={classNames(projectcss.all, sty.section__eu7Uc)}>
            <p.Stack
              as={"div"}
              data-plasmic-name={"container432"}
              data-plasmic-override={overrides.container432}
              hasGap={true}
              className={classNames(projectcss.all, sty.container432)}
            >
              <Button
                startIcon={
                  <HomeIcon
                    className={classNames(projectcss.all, sty.svg__hXqcl)}
                    role={"img"}
                  />
                }
              >
                {"Mens"}
              </Button>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gcGdw
                )}
              >
                {"/"}
              </div>
              <Button
                startIcon={
                  <HomeIcon
                    className={classNames(projectcss.all, sty.svg___3Kmjq)}
                    role={"img"}
                  />
                }
              >
                {"Shoes"}
              </Button>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___5CCuF
                )}
              >
                {"/"}
              </div>
              <Button
                startIcon={
                  <HomeIcon
                    className={classNames(projectcss.all, sty.svg__wj6Hm)}
                    role={"img"}
                  />
                }
              >
                {"Running"}
              </Button>
            </p.Stack>
          </section>
          <ProductBox
            data-plasmic-name={"productBox"}
            data-plasmic-override={overrides.productBox}
            className={classNames("__wab_instance", sty.productBox)}
            id={"eternity-nitro-mens-running-shoes"}
          >
            <ph.DataCtxReader>
              {$ctx => (
                <section
                  className={classNames(projectcss.all, sty.section__uoDYf)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"columns"}
                    data-plasmic-override={overrides.columns}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.columns)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__sug8L)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__klFhb
                        )}
                      >
                        <ProductMedia
                          data-plasmic-name={"productMedia"}
                          data-plasmic-override={overrides.productMedia}
                          className={classNames(
                            "__wab_instance",
                            sty.productMedia
                          )}
                        />

                        <ProductMediaCollection
                          data-plasmic-name={"productMediaCollection"}
                          data-plasmic-override={
                            overrides.productMediaCollection
                          }
                          className={classNames(
                            "__wab_instance",
                            sty.productMediaCollection
                          )}
                          media={
                            <ph.DataCtxReader>
                              {$ctx => (
                                <ProductMedia
                                  className={classNames(
                                    "__wab_instance",
                                    sty.productMedia__cf399
                                  )}
                                />
                              )}
                            </ph.DataCtxReader>
                          }
                        />
                      </p.Stack>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__jyJKp)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__yf2Ri
                        )}
                      >
                        <ProductTextField
                          className={classNames(
                            "__wab_instance",
                            sty.productTextField__h3CQu
                          )}
                          field={"name"}
                        />

                        <ProductPriceComponent
                          data-plasmic-name={"productPrice"}
                          data-plasmic-override={overrides.productPrice}
                          className={classNames(
                            "__wab_instance",
                            sty.productPrice
                          )}
                        />

                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__nhCdI
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__bsFWo
                            )}
                          >
                            {"Size"}
                          </div>
                          <ProductVariantPicker
                            data-plasmic-name={"productVariantPicker"}
                            data-plasmic-override={
                              overrides.productVariantPicker
                            }
                            className={classNames(
                              "__wab_instance",
                              sty.productVariantPicker
                            )}
                          />
                        </p.Stack>
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__wFtS
                          )}
                        >
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__h88Tu
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__c9Fca
                              )}
                            >
                              {"Quantity"}
                            </div>
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__mFiZ
                              )}
                            >
                              <ProductQuantity
                                data-plasmic-name={"productQuantity"}
                                data-plasmic-override={
                                  overrides.productQuantity
                                }
                                className={classNames(
                                  "__wab_instance",
                                  sty.productQuantity
                                )}
                              >
                                <TextInput
                                  data-plasmic-name={"textInput"}
                                  data-plasmic-override={overrides.textInput}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.textInput
                                  )}
                                  onChange={(...eventArgs) => {
                                    p.generateStateOnChangeProp($state, [
                                      "textInput",
                                      "value"
                                    ])(
                                      (e => e.target?.value).apply(
                                        null,
                                        eventArgs
                                      )
                                    );
                                  }}
                                  value={p.generateStateValueProp($state, [
                                    "textInput",
                                    "value"
                                  ])}
                                />
                              </ProductQuantity>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__vzDMe
                                )}
                              />

                              <Button
                                data-plasmic-name={"likeButton"}
                                data-plasmic-override={overrides.likeButton}
                                colors={"lightGrayOutline"}
                                iconOnly={true}
                                size={"large"}
                                startIcon={
                                  <LikeIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__x0Db
                                    )}
                                    role={"img"}
                                  />
                                }
                              />

                              <AddToCartButton
                                className={classNames(
                                  "__wab_instance",
                                  sty.addToCartButton__kzs3M
                                )}
                              >
                                <Button
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button__bhVvs
                                  )}
                                  colors={"black"}
                                  rounded={true}
                                  size={"large"}
                                >
                                  {"Add to cart"}
                                </Button>
                              </AddToCartButton>
                            </p.Stack>
                          </p.Stack>
                        </p.Stack>
                        <Separator
                          data-plasmic-name={"separator"}
                          data-plasmic-override={overrides.separator}
                          className={classNames(
                            "__wab_instance",
                            sty.separator
                          )}
                        />

                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___0UPd
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___0WsLx
                            )}
                          >
                            {"Description"}
                          </div>
                        </p.Stack>
                        <ProductTextField
                          className={classNames(
                            "__wab_instance",
                            sty.productTextField__wm6Zd
                          )}
                          field={"description"}
                        />
                      </p.Stack>
                    </div>
                  </p.Stack>
                </section>
              )}
            </ph.DataCtxReader>
          </ProductBox>
          <section className={classNames(projectcss.all, sty.section__fRn8H)}>
            <div
              data-plasmic-name={"container42"}
              data-plasmic-override={overrides.container42}
              className={classNames(projectcss.all, sty.container42)}
            >
              {p.renderPlasmicSlot({
                defaultContents: (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__lcGui)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__sDe4H
                      )}
                    >
                      {"You may also like"}
                    </div>
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__kJd1Y
                      )}
                      colors={"link"}
                      endIcon={
                        <RightArrowIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___4WPiu
                          )}
                          role={"img"}
                        />
                      }
                      showEndIcon={true}
                    >
                      {"See more"}
                    </Button>
                  </div>
                ),

                value: args.container42
              })}
            </div>
            <div
              data-plasmic-name={"container5"}
              data-plasmic-override={overrides.container5}
              className={classNames(projectcss.all, sty.container5)}
            >
              <ProductCollection
                data-plasmic-name={"productCollection"}
                data-plasmic-override={overrides.productCollection}
                category={"626c0a6465d64c00122ec197"}
                className={classNames("__wab_instance", sty.productCollection)}
                emptyMessage={
                  <ph.DataCtxReader>
                    {$ctx => (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__cAkSq
                        )}
                      >
                        {"No product found!"}
                      </div>
                    )}
                  </ph.DataCtxReader>
                }
                loadingMessage={
                  <ph.DataCtxReader>
                    {$ctx => (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vrb22
                        )}
                      >
                        {"Loading..."}
                      </div>
                    )}
                  </ph.DataCtxReader>
                }
              >
                <ph.DataCtxReader>
                  {$ctx =>
                    true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__vLprn
                        )}
                      >
                        <ProductCard
                          data-plasmic-name={"productCard"}
                          data-plasmic-override={overrides.productCard}
                          className={classNames(
                            "__wab_instance",
                            sty.productCard
                          )}
                        />
                      </div>
                    ) : null
                  }
                </ph.DataCtxReader>
              </ProductCollection>
            </div>
          </section>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "navBar",
    "container432",
    "productBox",
    "columns",
    "productMedia",
    "productMediaCollection",
    "productPrice",
    "productVariantPicker",
    "productQuantity",
    "textInput",
    "likeButton",
    "separator",
    "container42",
    "container5",
    "productCollection",
    "productCard",
    "footer"
  ],

  navBar: ["navBar"],
  container432: ["container432"],
  productBox: [
    "productBox",
    "columns",
    "productMedia",
    "productMediaCollection",
    "productPrice",
    "productVariantPicker",
    "productQuantity",
    "textInput",
    "likeButton",
    "separator"
  ],

  columns: [
    "columns",
    "productMedia",
    "productMediaCollection",
    "productPrice",
    "productVariantPicker",
    "productQuantity",
    "textInput",
    "likeButton",
    "separator"
  ],

  productMedia: ["productMedia"],
  productMediaCollection: ["productMediaCollection"],
  productPrice: ["productPrice"],
  productVariantPicker: ["productVariantPicker"],
  productQuantity: ["productQuantity", "textInput"],
  textInput: ["textInput"],
  likeButton: ["likeButton"],
  separator: ["separator"],
  container42: ["container42"],
  container5: ["container5", "productCollection", "productCard"],
  productCollection: ["productCollection", "productCard"],
  productCard: ["productCard"],
  footer: ["footer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicItem__ArgProps,
          internalVariantPropNames: PlasmicItem__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicItem";
  } else {
    func.displayName = `PlasmicItem.${nodeName}`;
  }
  return func;
}

export const PlasmicItem = Object.assign(
  // Top-level PlasmicItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navBar: makeNodeComponent("navBar"),
    container432: makeNodeComponent("container432"),
    productBox: makeNodeComponent("productBox"),
    columns: makeNodeComponent("columns"),
    productMedia: makeNodeComponent("productMedia"),
    productMediaCollection: makeNodeComponent("productMediaCollection"),
    productPrice: makeNodeComponent("productPrice"),
    productVariantPicker: makeNodeComponent("productVariantPicker"),
    productQuantity: makeNodeComponent("productQuantity"),
    textInput: makeNodeComponent("textInput"),
    likeButton: makeNodeComponent("likeButton"),
    separator: makeNodeComponent("separator"),
    container42: makeNodeComponent("container42"),
    container5: makeNodeComponent("container5"),
    productCollection: makeNodeComponent("productCollection"),
    productCard: makeNodeComponent("productCard"),
    footer: makeNodeComponent("footer"),
    // Metadata about props expected for PlasmicItem
    internalVariantProps: PlasmicItem__VariantProps,
    internalArgProps: PlasmicItem__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "Item",
      description:
        "Nunc parturient ultricies condimentum parturient sagittis urna mus conubia himenaeos fermentum leo mus dignissim pulvinar blandit porta eget ad.",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicItem;
/* prettier-ignore-end */
