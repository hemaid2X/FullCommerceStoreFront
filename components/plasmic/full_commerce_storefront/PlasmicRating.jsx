// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9ddDjPDiAQE72HUa13ENBq
// Component: qLTAu-9LoFkUZ4
import * as React from "react";
import { useRouter } from "next/router";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_full_commerce_storefront.module.css"; // plasmic-import: 9ddDjPDiAQE72HUa13ENBq/projectcss
import sty from "./PlasmicRating.module.css"; // plasmic-import: qLTAu-9LoFkUZ4/css
import EmptyStarIcon from "./icons/PlasmicIcon__EmptyStar"; // plasmic-import: L9i1_hE6o_18O0/icon
import FullStarIcon from "./icons/PlasmicIcon__FullStar"; // plasmic-import: o78yuDk4Y65xsq/icon
import HalfStarIcon from "./icons/PlasmicIcon__HalfStar"; // plasmic-import: -pgiW7syUgQ1kr/icon

export const PlasmicRating__VariantProps = new Array("rating");

export const PlasmicRating__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicRating__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "rating",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.rating
      }
    ],

    [$props, $ctx]
  );

  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.PlasmicIcon
        PlasmicIconType={
          hasVariant($state, "rating", "threeHalf")
            ? FullStarIcon
            : hasVariant($state, "rating", "twoHalf")
            ? FullStarIcon
            : hasVariant($state, "rating", "oneHalf")
            ? FullStarIcon
            : hasVariant($state, "rating", "half")
            ? HalfStarIcon
            : hasVariant($state, "rating", "five")
            ? FullStarIcon
            : hasVariant($state, "rating", "four")
            ? FullStarIcon
            : hasVariant($state, "rating", "three")
            ? FullStarIcon
            : hasVariant($state, "rating", "two")
            ? FullStarIcon
            : hasVariant($state, "rating", "fourHalf")
            ? FullStarIcon
            : hasVariant($state, "rating", "one")
            ? FullStarIcon
            : EmptyStarIcon
        }
        className={classNames(projectcss.all, sty.svg__j0NSm, {
          [sty.svgrating_five__j0NSma2XhD]: hasVariant(
            $state,
            "rating",
            "five"
          ),

          [sty.svgrating_fourHalf__j0NSmun3Zj]: hasVariant(
            $state,
            "rating",
            "fourHalf"
          ),

          [sty.svgrating_four__j0NSmOrxuT]: hasVariant(
            $state,
            "rating",
            "four"
          ),

          [sty.svgrating_half__j0NSmQmxVb]: hasVariant(
            $state,
            "rating",
            "half"
          ),

          [sty.svgrating_oneHalf__j0NSm9CyXi]: hasVariant(
            $state,
            "rating",
            "oneHalf"
          ),

          [sty.svgrating_one__j0NSm0MKm7]: hasVariant($state, "rating", "one"),
          [sty.svgrating_threeHalf__j0NSmY3Xjq]: hasVariant(
            $state,
            "rating",
            "threeHalf"
          ),

          [sty.svgrating_three__j0NSmJfSe0]: hasVariant(
            $state,
            "rating",
            "three"
          ),

          [sty.svgrating_twoHalf__j0NSmzfosz]: hasVariant(
            $state,
            "rating",
            "twoHalf"
          ),

          [sty.svgrating_two__j0NSmFymzj]: hasVariant($state, "rating", "two")
        })}
        role={"img"}
      />

      <p.PlasmicIcon
        PlasmicIconType={
          hasVariant($state, "rating", "threeHalf")
            ? FullStarIcon
            : hasVariant($state, "rating", "twoHalf")
            ? FullStarIcon
            : hasVariant($state, "rating", "oneHalf")
            ? HalfStarIcon
            : hasVariant($state, "rating", "five")
            ? FullStarIcon
            : hasVariant($state, "rating", "four")
            ? FullStarIcon
            : hasVariant($state, "rating", "three")
            ? FullStarIcon
            : hasVariant($state, "rating", "two")
            ? FullStarIcon
            : hasVariant($state, "rating", "fourHalf")
            ? FullStarIcon
            : EmptyStarIcon
        }
        className={classNames(projectcss.all, sty.svg___2SrfX, {
          [sty.svgrating_five___2SrfXa2XhD]: hasVariant(
            $state,
            "rating",
            "five"
          ),

          [sty.svgrating_fourHalf___2SrfXun3Zj]: hasVariant(
            $state,
            "rating",
            "fourHalf"
          ),

          [sty.svgrating_four___2SrfXOrxuT]: hasVariant(
            $state,
            "rating",
            "four"
          ),

          [sty.svgrating_oneHalf___2SrfX9CyXi]: hasVariant(
            $state,
            "rating",
            "oneHalf"
          ),

          [sty.svgrating_threeHalf___2SrfXy3Xjq]: hasVariant(
            $state,
            "rating",
            "threeHalf"
          ),

          [sty.svgrating_three___2SrfXjfSe0]: hasVariant(
            $state,
            "rating",
            "three"
          ),

          [sty.svgrating_twoHalf___2SrfXzfosz]: hasVariant(
            $state,
            "rating",
            "twoHalf"
          ),

          [sty.svgrating_two___2SrfXFymzj]: hasVariant($state, "rating", "two")
        })}
        role={"img"}
      />

      <p.PlasmicIcon
        PlasmicIconType={
          hasVariant($state, "rating", "threeHalf")
            ? FullStarIcon
            : hasVariant($state, "rating", "twoHalf")
            ? HalfStarIcon
            : hasVariant($state, "rating", "five")
            ? FullStarIcon
            : hasVariant($state, "rating", "four")
            ? FullStarIcon
            : hasVariant($state, "rating", "three")
            ? FullStarIcon
            : hasVariant($state, "rating", "fourHalf")
            ? FullStarIcon
            : EmptyStarIcon
        }
        className={classNames(projectcss.all, sty.svg___3Z74G, {
          [sty.svgrating_five___3Z74Ga2XhD]: hasVariant(
            $state,
            "rating",
            "five"
          ),

          [sty.svgrating_fourHalf___3Z74Gun3Zj]: hasVariant(
            $state,
            "rating",
            "fourHalf"
          ),

          [sty.svgrating_four___3Z74GOrxuT]: hasVariant(
            $state,
            "rating",
            "four"
          ),

          [sty.svgrating_threeHalf___3Z74Gy3Xjq]: hasVariant(
            $state,
            "rating",
            "threeHalf"
          ),

          [sty.svgrating_three___3Z74GjfSe0]: hasVariant(
            $state,
            "rating",
            "three"
          ),

          [sty.svgrating_twoHalf___3Z74Gzfosz]: hasVariant(
            $state,
            "rating",
            "twoHalf"
          )
        })}
        role={"img"}
      />

      <p.PlasmicIcon
        PlasmicIconType={
          hasVariant($state, "rating", "threeHalf")
            ? HalfStarIcon
            : hasVariant($state, "rating", "five")
            ? FullStarIcon
            : hasVariant($state, "rating", "four")
            ? FullStarIcon
            : hasVariant($state, "rating", "fourHalf")
            ? FullStarIcon
            : EmptyStarIcon
        }
        className={classNames(projectcss.all, sty.svg__caTq4, {
          [sty.svgrating_five__caTq4A2XhD]: hasVariant(
            $state,
            "rating",
            "five"
          ),

          [sty.svgrating_fourHalf__caTq4Un3Zj]: hasVariant(
            $state,
            "rating",
            "fourHalf"
          ),

          [sty.svgrating_four__caTq4OrxuT]: hasVariant(
            $state,
            "rating",
            "four"
          ),

          [sty.svgrating_threeHalf__caTq4Y3Xjq]: hasVariant(
            $state,
            "rating",
            "threeHalf"
          )
        })}
        role={"img"}
      />

      <p.PlasmicIcon
        PlasmicIconType={
          hasVariant($state, "rating", "five")
            ? FullStarIcon
            : hasVariant($state, "rating", "fourHalf")
            ? HalfStarIcon
            : EmptyStarIcon
        }
        className={classNames(projectcss.all, sty.svg__qqi8U, {
          [sty.svgrating_five__qqi8Ua2XhD]: hasVariant(
            $state,
            "rating",
            "five"
          ),

          [sty.svgrating_fourHalf__qqi8Uun3Zj]: hasVariant(
            $state,
            "rating",
            "fourHalf"
          )
        })}
        role={"img"}
      />
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicRating__ArgProps,
          internalVariantPropNames: PlasmicRating__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicRating__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRating";
  } else {
    func.displayName = `PlasmicRating.${nodeName}`;
  }
  return func;
}

export const PlasmicRating = Object.assign(
  // Top-level PlasmicRating renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicRating
    internalVariantProps: PlasmicRating__VariantProps,
    internalArgProps: PlasmicRating__ArgProps
  }
);

export default PlasmicRating;
/* prettier-ignore-end */
