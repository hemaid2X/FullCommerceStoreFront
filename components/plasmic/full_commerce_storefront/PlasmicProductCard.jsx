// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9ddDjPDiAQE72HUa13ENBq
// Component: 7P4VbSUTHTWj1G
import * as React from "react";
import Link from "next/link";
import { useRouter } from "next/router";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  useTrigger,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { ProductMedia } from "@plasmicpkgs/commerce"; // plasmic-import: qpULM0wwWW/codeComponent
import Button from "../../Button"; // plasmic-import: r98mWgbU1oG5dP/component
import Rating from "../../Rating"; // plasmic-import: qLTAu-9LoFkUZ4/component
import { ProductTextField } from "@plasmicpkgs/commerce"; // plasmic-import: S1F4q0wN6b/codeComponent
import { ProductPriceComponent } from "@plasmicpkgs/commerce"; // plasmic-import: _PaJxGc8gf/codeComponent
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_full_commerce_storefront.module.css"; // plasmic-import: 9ddDjPDiAQE72HUa13ENBq/projectcss
import sty from "./PlasmicProductCard.module.css"; // plasmic-import: 7P4VbSUTHTWj1G/css

export const PlasmicProductCard__VariantProps = new Array("small");

export const PlasmicProductCard__ArgProps = new Array(
  "tags",
  "children",
  "link",
  "rating",
  "img"
);

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProductCard__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          link: `/item`,
          img: {
            src: "/plasmic/full_commerce_storefront/images/shoe14.png",
            fullWidth: 840,
            fullHeight: 840,
            aspectRatio: undefined
          }
        },
        props.args
      ),

    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "small",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.small
      }
    ],

    [$props, $ctx]
  );

  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });
  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover
  };
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootsmall]: hasVariant($state, "small", "small") }
      )}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      <p.PlasmicLink
        data-plasmic-name={"link"}
        data-plasmic-override={overrides.link}
        className={classNames(projectcss.all, projectcss.a, sty.link, {
          [sty.linksmall]: hasVariant($state, "small", "small")
        })}
        component={Link}
        href={args.link}
        platform={"nextjs"}
      >
        <ProductMedia
          data-plasmic-name={"productMedia"}
          data-plasmic-override={overrides.productMedia}
          className={classNames("__wab_instance", sty.productMedia, {
            [sty.productMediasmall]: hasVariant($state, "small", "small")
          })}
        />

        {(
          hasVariant($state, "small", "small") && triggers.hover_root
            ? true
            : false
        ) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox___67KY0, {
              [sty.freeBoxsmall___67KY0Zj8Al]: hasVariant(
                $state,
                "small",
                "small"
              )
            })}
          />
        ) : null}
        {(hasVariant($state, "small", "small") ? true : true) ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___58Fbv, {
              [sty.freeBoxsmall___58Fbvzj8Al]: hasVariant(
                $state,
                "small",
                "small"
              )
            })}
          >
            <div className={classNames(projectcss.all, sty.freeBox__b66Cu)}>
              {p.renderPlasmicSlot({
                defaultContents: (
                  <Button colors={"lightGray"} size={"small"}>
                    {"New"}
                  </Button>
                ),

                value: args.tags
              })}
              {p.renderPlasmicSlot({
                defaultContents: (
                  <Rating
                    className={classNames("__wab_instance", sty.rating__eiGx)}
                  />
                ),

                value: args.rating
              })}
            </div>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__ym7MV)}
            >
              {p.renderPlasmicSlot({
                defaultContents: (
                  <React.Fragment>
                    <ProductTextField
                      className={classNames(
                        "__wab_instance",
                        sty.productTextField__qZxi
                      )}
                      field={"name"}
                    />

                    <ProductTextField
                      className={classNames(
                        "__wab_instance",
                        sty.productTextField__cKTo
                      )}
                      field={"description"}
                    />
                  </React.Fragment>
                ),

                value: args.children
              })}
            </p.Stack>
            <ProductPriceComponent
              data-plasmic-name={"productPrice"}
              data-plasmic-override={overrides.productPrice}
              className={classNames("__wab_instance", sty.productPrice)}
            />
          </p.Stack>
        ) : null}
      </p.PlasmicLink>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "link", "productMedia", "productPrice"],
  link: ["link", "productMedia", "productPrice"],
  productMedia: ["productMedia"],
  productPrice: ["productPrice"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicProductCard__ArgProps,
          internalVariantPropNames: PlasmicProductCard__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicProductCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProductCard";
  } else {
    func.displayName = `PlasmicProductCard.${nodeName}`;
  }
  return func;
}

export const PlasmicProductCard = Object.assign(
  // Top-level PlasmicProductCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    productMedia: makeNodeComponent("productMedia"),
    productPrice: makeNodeComponent("productPrice"),
    // Metadata about props expected for PlasmicProductCard
    internalVariantProps: PlasmicProductCard__VariantProps,
    internalArgProps: PlasmicProductCard__ArgProps
  }
);

export default PlasmicProductCard;
/* prettier-ignore-end */
